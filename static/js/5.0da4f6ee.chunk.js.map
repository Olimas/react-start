{"version":3,"sources":["hoc/withAuthRedirect.js","components/Content/Dialogs/Dialogs.module.css","components/Content/Dialogs/DialogItem/DialogItem.jsx","components/Content/Dialogs/Message/Message.jsx","components/Content/Dialogs/Dialogs.jsx","components/Content/Dialogs/DialogsContainer.jsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","module","exports","DialogItem","path","id","className","s","dialog","active","name","Message","message","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","inputMessages","placeholder","component","Textarea","validate","required","sendMessage","Dialogs","dialogsPage","dialogsElements","dialogs","map","d","messagesElements","messages","m","dialogItems","values","addMessage","newMessageText","compose","dispatch","addMessageActionCreator"],"mappings":"sOAIIA,EAA6B,SAACC,GAChC,MAAO,CACLC,OAAQD,EAAME,KAAKD,SAIVE,EAAmB,SAACC,GAAe,IACxCC,EADuC,4JAE3C,WACE,OAAKC,KAAKC,MAAMN,OAET,cAACG,EAAD,eAAeE,KAAKC,QAFI,cAAC,IAAD,CAAUC,GAAG,eAHH,GACbC,IAAML,WAUtC,OAFqCM,YAAQX,EAARW,CAAoCL,K,oBClB3EM,EAAOC,QAAU,CAAC,QAAU,yBAAyB,YAAc,6BAA6B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,yBAAyB,cAAgB,+BAA+B,YAAc,+B,2FCWxRC,EATI,SAACN,GAClB,IAAIO,EAAO,YAAcP,EAAMQ,GAC/B,OACE,qBAAKC,UAAS,UAAKC,IAAEC,OAAP,YAAiBD,IAAEE,QAAjC,SACE,cAAC,IAAD,CAASX,GAAIM,EAAb,SAAoBP,EAAMa,UCCjBC,EANC,SAACd,GACf,OACE,qBAAKS,UAAWC,IAAEC,OAAlB,SAA2BX,EAAMe,W,kCC2B/BC,EAAcC,YAAiB,IAoB/BC,EAAsBC,YAAU,CACpCC,KAAM,wBADoBD,EAlBL,SAACnB,GACtB,OACE,uBAAMqB,SAAUrB,EAAMsB,aAAtB,UACE,8BACE,cAACC,EAAA,EAAD,CAAOd,UAAWC,IAAEc,cACbC,YAAY,qBACZZ,KAAM,iBACNa,UAAWC,IACXC,SAAU,CAACC,IAAUb,OAG9B,8BACE,wBAAQP,UAAWC,IAAEoB,YAArB,kCAWOC,EA/CC,SAAC/B,GACf,IAAIP,EAAQO,EAAMgC,YACdC,EAAkBxC,EAAMyC,QAAQC,KAAI,SAAAC,GAAC,OAAK,cAAC,EAAD,CAAY5B,GAAI4B,EAAE5B,GAAeK,KAAMuB,EAAEvB,MAAduB,EAAE5B,OACvE6B,EAAmB5C,EAAM6C,SAASH,KAAI,SAAAI,GAAC,OAAK,cAAC,EAAD,CAAoBxB,QAASwB,EAAExB,SAAjBwB,EAAE/B,OAMhE,OACE,sBAAKC,UAAWC,IAAEwB,QAAlB,UACE,qBAAKzB,UAAWC,IAAE8B,YAAlB,SACGP,IAEH,sBAAKxB,UAAWC,IAAE4B,SAAlB,UACGD,EACD,cAACnB,EAAD,CAAqBG,SAXP,SAACoB,GACnBzC,EAAM0C,WAAWD,EAAOE,0B,yBCQbC,sBACbzC,aAfoB,SAACV,GACrB,MAAO,CACLuC,YAAavC,EAAMuC,gBAIE,SAACa,GACxB,MAAO,CACLH,WAAY,SAACC,GACXE,EAASC,YAAwBH,SAOrC/C,IAFagD,CAGbb","file":"static/js/5.0da4f6ee.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => {\r\n  return {\r\n    isAuth: state.auth.isAuth\r\n  }\r\n}\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n  class RedirectComponent extends React.Component {\r\n    render() {\r\n      if (!this.props.isAuth) return <Redirect to=\"/login\"/>\r\n\r\n      return <Component {...this.props} />\r\n    }\r\n  }\r\n\r\n  let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n  return ConnectedAuthRedirectComponent;\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2tYKX\",\"dialogItems\":\"Dialogs_dialogItems__Ol2OS\",\"dialog\":\"Dialogs_dialog__3FKOr\",\"active\":\"Dialogs_active__tHnxR\",\"messages\":\"Dialogs_messages__1_JlG\",\"message\":\"Dialogs_message__33rkk\",\"inputMessages\":\"Dialogs_inputMessages__1Yf4p\",\"sendMessage\":\"Dialogs_sendMessage__2rfyP\"};","import s from '../Dialogs.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst DialogItem = (props) => {\r\n  let path = \"/dialogs/\" + props.id\r\n  return (\r\n    <div className={`${s.dialog} ${s.active}`}>\r\n      <NavLink to={path}>{props.name}</NavLink>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DialogItem;\r\n","import s from '../Dialogs.module.css'\r\n\r\nconst Message = (props) => {\r\n  return (\r\n    <div className={s.dialog}>{props.message}</div>\r\n  )\r\n}\r\n\r\nexport default Message;\r\n","import s from './Dialogs.module.css'\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport React from \"react\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/formsControls/FormControls\";\r\n\r\n\r\nconst Dialogs = (props) => {\r\n  let state = props.dialogsPage;\r\n  let dialogsElements = state.dialogs.map(d => (<DialogItem id={d.id} key={d.id} name={d.name}/>))\r\n  let messagesElements = state.messages.map(m => (<Message key={m.id} message={m.message}/>))\r\n\r\n  let addNewMessage = (values) => {\r\n    props.addMessage(values.newMessageText);\r\n  }\r\n\r\n  return (\r\n    <div className={s.dialogs}>\r\n      <div className={s.dialogItems}>\r\n        {dialogsElements}\r\n      </div>\r\n      <div className={s.messages}>\r\n        {messagesElements}\r\n        <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\nconst AddMessageForm = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div>\r\n        <Field className={s.inputMessages}\r\n               placeholder=\"Enter your message\"\r\n               name={\"newMessageText\"}\r\n               component={Textarea}\r\n               validate={[required, maxLength50]}\r\n        />\r\n      </div>\r\n      <div>\r\n        <button className={s.sendMessage}>Send message</button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm({\r\n  form: 'dialogAddMessageForm'\r\n})(AddMessageForm)\r\n\r\n\r\nexport default Dialogs;\r\n","import React from \"react\";\r\nimport {\r\n  addMessageActionCreator,\r\n} from \"../../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    dialogsPage: state.dialogsPage,\r\n  }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addMessage: (newMessageText) => {\r\n      dispatch(addMessageActionCreator(newMessageText));\r\n    },\r\n  }\r\n}\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, mapDispatchToProps),\r\n  withAuthRedirect\r\n)(Dialogs);\r\n"],"sourceRoot":""}